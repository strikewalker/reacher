// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reacher.Data;

#nullable disable

namespace Reacher.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220509171929_UpdateInvoiceStatus")]
    partial class UpdateInvoiceStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Reacher.Data.Models.DbEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CostUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FromEmailName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReachableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StrikeInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(998)
                        .HasColumnType("nvarchar(998)");

                    b.Property<string>("ToEmailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ToEmailName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromEmailAddress");

                    b.HasIndex("InvoiceStatus");

                    b.HasIndex("OriginalEmailId");

                    b.HasIndex("ReachableId");

                    b.HasIndex("SentDate");

                    b.HasIndex("StrikeInvoiceId");

                    b.HasIndex("ToEmailAddress");

                    b.HasIndex("Type");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbReachable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostUsdToReach")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ReacherEmailAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("StrikeUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToEmailAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReacherEmailAddress")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reachable");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("StrikeUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbWhitelist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EmailAddress", "UserId")
                        .IsUnique();

                    b.ToTable("Whitelist");
                });

            modelBuilder.Entity("Reacher.Data.Models.EnumTable<Reacher.Data.Enums.EmailType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EmailTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "New"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InboundReach"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InboundForward"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PaymentRequest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "OutboundReply"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OutboundForward"
                        },
                        new
                        {
                            Id = 7,
                            Name = "TooSoon"
                        },
                        new
                        {
                            Id = 8,
                            Name = "PaymentSuccess"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Disabled"
                        },
                        new
                        {
                            Id = 10,
                            Name = "TooBig"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Whitelisted"
                        });
                });

            modelBuilder.Entity("Reacher.Data.Models.EnumTable<Reacher.Data.Enums.InvoiceStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Requested"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Paid"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Forwarded"
                        });
                });

            modelBuilder.Entity("Reacher.Data.Models.DbEmail", b =>
                {
                    b.HasOne("Reacher.Data.Models.EnumTable<Reacher.Data.Enums.InvoiceStatus>", "InvoiceStatusRef")
                        .WithMany()
                        .HasForeignKey("InvoiceStatus");

                    b.HasOne("Reacher.Data.Models.DbEmail", "OriginalEmail")
                        .WithMany()
                        .HasForeignKey("OriginalEmailId");

                    b.HasOne("Reacher.Data.Models.DbReachable", "Reachable")
                        .WithMany("Emails")
                        .HasForeignKey("ReachableId");

                    b.HasOne("Reacher.Data.Models.EnumTable<Reacher.Data.Enums.EmailType>", "TypeRef")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceStatusRef");

                    b.Navigation("OriginalEmail");

                    b.Navigation("Reachable");

                    b.Navigation("TypeRef");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbReachable", b =>
                {
                    b.HasOne("Reacher.Data.Models.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbWhitelist", b =>
                {
                    b.HasOne("Reacher.Data.Models.DbUser", "User")
                        .WithMany("Whitelist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbReachable", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Reacher.Data.Models.DbUser", b =>
                {
                    b.Navigation("Whitelist");
                });
#pragma warning restore 612, 618
        }
    }
}
